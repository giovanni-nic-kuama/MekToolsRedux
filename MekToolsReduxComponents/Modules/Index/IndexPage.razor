@page "/"
@inject NavigationManager NavigationManager

<div class="bg-green-200 flex-column h-screen">
  <AppBar/>

  <div class="flex justify-center mt-10">
    <div class="w-2/3">
      <Card Title=".NET Module Generator">
        <div class="flex-column">
          <MekTextInput
            Label="Nome Entità al singolare:"
            PlaceHolder="Inserire Nome Entità al singolare"
            ErrorMessage="@EntitySingularNameErrorMessage"
            OnChange="@OnEntitySingularNameChange"/>

          <MekTextInput
            Label="Nome Entità al plurale:"
            PlaceHolder="Inserire Nome Entità al plurale"
            ErrorMessage="@EntityPluralNameErrorMessage"
            OnChange="@OnEntityPluralNameChange"/>

          <MekTextInput
            Label="Destinazione file generati:"
            PlaceHolder="Inserire destinazione file generati"
            ErrorMessage="@DestinationPathErrorMessage"
            OnChange="@OnDestinationPathChange"/>

          <div class="grid grid-cols-3 gap-4">
            <MekCheckBox
              Label="Mappings"
              Enabled="@AreMappingsEnabled"
              OnChange="@OnAreMappingsEnabledChange"/>

            <MekCheckBox
              Label="Validators"
              Enabled="@AreValidatorsEnabled"
              OnChange="@OnAreAreValidatorsEnabledChange"/>

            @*TODO next checkbox*@
            <MekCheckBox
              Label="Only Upsert"
              Enabled="@AreValidatorsEnabled"
              OnChange="@OnAreAreValidatorsEnabledChange"/>
          </div>

          <div class="flex justify-end mt-5">
            <MekButton Text="Conferma" OnClick="@OnSubmit"/>
          </div>
        </div>
      </Card>
    </div>
  </div>
</div>


@code {
  public string EntitySingularNameValue { get; set; } = "";
  public string? EntitySingularNameErrorMessage { get; set; }

  public string EntityPluralNameValue { get; set; } = "";
  public string? EntityPluralNameErrorMessage { get; set; }

  public string DestinationPathValue { get; set; } = "";
  public string? DestinationPathErrorMessage { get; set; }

  public bool AreMappingsEnabled { get; set; } = true;
  public bool AreValidatorsEnabled { get; set; }

  public void OnAreMappingsEnabledChange(bool v)
  {
    Console.WriteLine(v);
    AreMappingsEnabled = v;
  }

  public void OnAreAreValidatorsEnabledChange(bool v)
  {
    Console.WriteLine(v);
    AreValidatorsEnabled = v;
  }

  private void OnEntitySingularNameChange(string value)
  {
    EntitySingularNameValue = value;
  }

  private void OnEntityPluralNameChange(string value)
  {
    EntityPluralNameValue = value;
  }

  private void OnDestinationPathChange(string value)
  {
    DestinationPathValue = value;
  }

  private void OnSubmit()
  {
    var isSingularNameValid = ValidateEntitySingularNameValueAndShowErrorMessage();
    var isPluralNameValid = ValidateEntityPluralNameErrorMessageAndShowErrorMessage();
    var isDestinationPathValid = ValidateDestinationPathAndShowErrorMessage();
  }

  private void Navigate()
  {
    NavigationManager.NavigateTo(PageRoutes.MainPage);
  }

  private bool ValidateEntitySingularNameValueAndShowErrorMessage()
  {
    if (string.IsNullOrWhiteSpace(EntitySingularNameValue))
    {
      EntitySingularNameErrorMessage = "Il valore non può essere vuoto";
      return false;
    }

    EntitySingularNameErrorMessage = null;
    return true;
  }

  private bool ValidateEntityPluralNameErrorMessageAndShowErrorMessage()
  {
    if (string.IsNullOrWhiteSpace(EntityPluralNameValue))
    {
      EntityPluralNameErrorMessage = "Il valore non può essere vuoto";
      return false;
    }

    EntityPluralNameErrorMessage = null;
    return true;
  }

  private bool ValidateDestinationPathAndShowErrorMessage()
  {
    if (string.IsNullOrWhiteSpace(DestinationPathValue))
    {
      DestinationPathErrorMessage = "Il valore non può essere vuoto";
      return false;
    }

    DestinationPathErrorMessage = null;
    return true;
  }

}